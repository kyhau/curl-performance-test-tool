name: deploy-main-stacks

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/deploy-curl-performance-test-main.yaml
      - cloudformation/**
      - lambda/**
      - scripts/**

defaults:
  run:
    shell: bash

jobs:
  lint:
    name: Run yamllint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run yamllint
        run: yamllint -c ./.github/linters/.yaml-lint.yaml .github/ cloudformation/

  deploy-curl-performance-test:
    name: Deploy curl performance test
    needs: [lint]
    runs-on: ubuntu-latest
    environment:
      name: production
    env:
      python-version: 3.9
      region: ap-southeast-2
    strategy:
      matrix:
        account: [K_AWS_01]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}

      - uses: aws-actions/configure-aws-credentials@v3.0.2
        env:
          AWS_ACCESS_KEY_ID_NAME: ${{ matrix.account }}_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY_NAME: ${{ matrix.account }}_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: ${{ env.region }}
        with:
          aws-access-key-id: ${{ secrets[env.AWS_ACCESS_KEY_ID_NAME] }}
          aws-secret-access-key: ${{ secrets[env.AWS_SECRET_ACCESS_KEY_NAME] }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - run: echo "accountid=$(aws sts get-caller-identity | jq -r .Account)" >> $GITHUB_ENV

      - id: Bucket
        env:
          bucket-suffix: ${{ secrets.BUCKET_SUFFIX }}
        run: |
          echo "name=curl-performance-test-${{ env.accountid }}-${{ env.region }}-${{ env.bucket-suffix }}" >> $GITHUB_OUTPUT

      # Note: If deploying the Lambda Function in VPC
      # - id: VpcInfo
      #   run: |
      #     if [[ "${{ env.accountid }}" == "123456789012" ]]
      #     then
      #       echo "vpcid=vpc-11111111" >> $GITHUB_OUTPUT
      #       echo "subnetid1=subnet-11111111" >> $GITHUB_OUTPUT
      #       echo "subnetid2=subnet-11111111" >> $GITHUB_OUTPUT
      #     else
      #       echo "Error: ${{ env.accountid }} VPC info not found"
      #       exit 1
      #     fi

      - name: Deploy curl-performance-test-common stack to ${{ matrix.account }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          capabilities: CAPABILITY_NAMED_IAM
          name: curl-performance-test-common
          no-fail-on-empty-changeset: 1
          parameter-overrides: >-
            BucketName=${{ steps.Bucket.outputs.name }},
            NotificationEndpoint=
          template: ./cloudformation/curl-performance-test-common.yaml

      - name: Upload URL lists to S3
        run: |
          cp ./inputs/123456789012-${{ env.region }}.json ./inputs/${{ env.accountid }}-${{ env.region }}.json
          aws s3 cp ./inputs/${{ env.accountid }}-${{ env.region }}.json s3://${{ steps.Bucket.outputs.name }}/inputs/ --region ${{ env.region }}

      - name: Package and upload Lambda Function
        id: LambdaPackage
        run: |
          zip -j curl-performance-test-$(git rev-parse --short HEAD).zip ./lambda/curl_performance_test.py
          aws s3 cp curl-performance-test-$(git rev-parse --short HEAD).zip s3://${{ steps.Bucket.outputs.name }}/ --region ${{ env.region }}
          echo "S3Key=curl-performance-test-$(git rev-parse --short HEAD).zip" >> $GITHUB_OUTPUT

      - name: Deploy curl-performance-test-main stack to ${{ matrix.account }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: curl-performance-test-main
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: 1
          parameter-overrides: >-
            ArtifactsBucketName=${{ steps.Bucket.outputs.name }},
            CloudWatchCustomMetricNamespace=CurlPerformance,
            LambdaFunctionName=curl-performance-test,
            LambdaPackageS3Key=${{ steps.LambdaPackage.outputs.S3Key }},
            ScheduleExpression=rate(1 hour),
            SubnetId1=,
            SubnetId2=,
            VpcId=
          # Note: Enable the following if running the lambda in VPC
          # SubnetId1=${{ steps.VpcInfo.outputs.subnetid1 }},
          # SubnetId2=${{ steps.VpcInfo.outputs.subnetid2 }},
          # VpcId=${{ steps.VpcInfo.outputs.vpcid }}
          template: ./cloudformation/curl-performance-test-main.yaml

      - name: Deploy CloudWatch Dashboard CurlPerformance to ${{ matrix.account }}
        run: |
          python3 -m venv env
          source env/bin/activate
          pip install -r scripts/requirements.txt
          python3 scripts/deploy_dashboard.py -n CurlPerformance -f ./inputs/${{ env.accountid }}-${{ env.region }}.json -r ${{ env.region }}
          deactivate
